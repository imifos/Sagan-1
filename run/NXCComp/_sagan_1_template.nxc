/*
Application for LEGO NXT generated by Sagan-1
http://sagan-project.eu

V 1.0.3
05/2012

2 Motors of the rover on: OUT_BC
(Collision detection by Sonar Sensor: IN_1 - currently disabled so not needed)
Optional but recommended Compass Sensor in IN_2
App start/stop touch button: IN_3
*/


int stopIt=0;
int currentA;
int targetA;
int startA;


/* --------------------------- */

// ---------------------------------------------
// Math functions we need for angle calculations
// ---------------------------------------------

/*
NXT Compass Range:

   10----    
   /     \
  0°     180°
   \     /
   350---

Turn Left: 
    Angle decrease    
       -<-
      /   \

Turn Right:
    Angle increase
      ->-
     /   \
*/


// -------------------------------------------- 
//
inline int abs(int a) {
    return (a < 0) ? -a : a;
}
  
  
// -------------------------------------------- 
//
inline int min(int a, int b) {
    return (a <= b) ? a : b;
}
   
// -------------------------------------------- 
// Calculates the difference between 2 angles, 
// taking into account the 0-359° jump
//
inline int delta(int alpha,int beta) {
    int delta1=abs(alpha-beta);
    int delta2=abs((alpha+360)-beta);
    int delta3=abs(alpha-(beta+360));
    int d=min(delta2,delta3);
    return min(delta1,d);
}


// -------------------------------------------- 
// 
//
inline int continueTurnLeft(int startAngle,int targetAngle,int currentAngle) {
        
    if (startAngle<targetAngle) targetAngle-=359;

    if (currentAngle>startAngle+2) currentAngle-=359; 
    // +2 to counter the +- variations of the compass that could cause this 
    // condition to kick in before the mouvement starts.
    
    if (currentAngle>targetAngle)
        return 1;
    else return 0;
}


// -------------------------------------------- 
// 
//
inline int continueTurnRight(int startAngle,int targetAngle,int currentAngle) {
        
    if (startAngle>targetAngle) targetAngle+=359;
    if (currentAngle<startAngle-2) currentAngle+=359; 
    
    if (currentAngle<targetAngle)
        return 1;
    else return 0;
}


/* --------------------------- */

sub turnLeftPrecise(int deg) {

    if (stopIt!=1) { 

        Off(OUT_BC);  
        Wait(333);  

        currentA=SensorHTCompass(S2);
        targetA=currentA-deg;
        startA=currentA;
        if (targetA<=0) targetA+=359;
        while( continueTurnLeft(startA,targetA,currentA)==1 && stopIt!=1) { 
            OnFwdSync(OUT_BC,30,-100);      // You can optimize speed here, but
            Wait(200);                      // there is a risk decreasing the 
            Off(OUT_BC);                    // precision
            Wait(100);      
            currentA=SensorHTCompass(S2);  
        }
    }
}

/* --------------------------- */

sub turnLeft(int deg) {

    if (stopIt!=1) { 
        currentA=SensorHTCompass(S2);
        targetA=currentA-deg;
        startA=currentA;
        if (targetA<=0) targetA+=359;
        OnFwdSync(OUT_BC,30,-100);
        while( continueTurnLeft(startA,targetA,currentA)==1 && stopIt!=1) { 
           currentA=SensorHTCompass(S2);  
        }
        Off(OUT_BC); 
    }
}

/* --------------------------- */

sub turnRightPrecise(int deg) {

    if (stopIt!=1) { 

        Off(OUT_BC);  
        Wait(333);  

        currentA=SensorHTCompass(S2);
        targetA=currentA+deg;
        startA=currentA;
        if (targetA>359) targetA-=360;

        while( continueTurnRight(startA,targetA,currentA)==1 && stopIt!=1) { 
            OnFwdSync(OUT_BC,30,100);   
            Wait(200);
            Off(OUT_BC);    
            Wait(100);
            currentA=SensorHTCompass(S2);  
        }
    }
}

/* --------------------------- */

sub turnRight(int deg) {

    if (stopIt!=1) { 
        currentA=SensorHTCompass(S2);
        targetA=currentA+deg;
        startA=currentA;
        if (targetA>359) targetA-=360;
        OnFwdSync(OUT_BC,30,100);
        while( continueTurnRight(startA,targetA,currentA)==1 && stopIt!=1) { 
           currentA=SensorHTCompass(S2);  
        }
        Off(OUT_BC); 
    }
}

/* --------------------------- */

sub turnNoCompass(int steps,int direction /* 1 or -1 */) {

    if (stopIt!=1) { 

        int cnt=0;
        while( cnt<steps && stopIt!=1) { 
            OnFwdSync(OUT_BC,30,100*direction);   
            Wait(150);
            Off(OUT_BC);    
            Wait(100);  // time to stop
            cnt++;
            TextOut(0,LCD_LINE1,"        ");
            NumOut(0,LCD_LINE1,cnt);
        }
    }
}

/* --------------------------- */

sub signal() {
    PlayToneEx(262*2,400,5,FALSE);  
    Wait(500);
    PlayToneEx(294*2,400,4,FALSE);
    Wait(500); 
    PlayToneEx(330*2,400,4,FALSE);
    Wait(500); 
    PlayToneEx(294*2,400,4,FALSE); 
    Wait(500); 
    PlayToneEx(262*2,1600,4,FALSE); 
    Wait(1000); 
}


/* --------------------------- */

task main_prog() {

    PlayTone(7000,30);
    Wait(100);

    /* NXT SAGAN GENERATED COMMANDS START */

    
    /*{SAGAN1_COMMANDS_HERE}*/

    
    /* NXT SAGAN GENERATED COMMANDS STOP */

    Off(OUT_BC);
    stopIt=1; /* let all threads exit gracefully */

    PlayTone(2500,30);
    Wait(300);
    StopAllTasks(); /* force exit */
}

/* --------------------------- */

task check_sensors() {

    while(stopIt==0) {
        Wait(200);
        /*
        Don't use frontal distance sensor to have more CPU for compass.
        if (SensorUS(IN_1)<=6) {
            stopIt=1; // abort other threads. 
        }
        */
        if (SENSOR_3!=0) {
            stopIt=1; 
        }
    }
    Off(OUT_BC);
    Wait(300);
    StopAllTasks(); /* force exit */
}


/* --------------------------- */

task display() {

    // Screen IO is actually very time consuming and the LEGO OS is not 
    // a RTOS, so we don't want to wast CPU here.

    /*
    TextOut(0,LCD_LINE1,"Sagan-1 Program running...");
    TextOut(0,LCD_LINE2,"OUT_B Speed:               ");
    TextOut(0,LCD_LINE3,"OUT_C Speed:               ");
    TextOut(0,LCD_LINE4,"ANGLE:");
    while(stopIt==0) {
        Wait(250);
        NumOut(70,LCD_LINE2,MotorActualSpeed(OUT_B));
        NumOut(70,LCD_LINE3,MotorActualSpeed(OUT_C));
        TextOut(70,LCD_LINE4,"     "); 
        NumOut(70,LCD_LINE4,SensorHTCompass(S2));
    }
    */
}

/* --------------------------- */

task main() {

    stopIt=0;

    //SetSensorLowspeed(IN_1);
    SetSensorTouch(IN_3);
    SetSensorLowspeed(S2);

    /* wait for starting push button */
    while(SENSOR_3 == 0) Wait(10);
    PlayTone(3000,500);
    
    Wait(1500);

    TextOut(0,LCD_LINE1,"Sagan-1 Program running...");

    /* Start execution and monitoring threads. */
    Precedes(main_prog,check_sensors,display);
}